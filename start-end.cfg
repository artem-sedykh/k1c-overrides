[output_pin Bed_Warp_Stabilisation]
pin: virtual_pin:BED_WARP_STABILISE_pin
value: 0

[output_pin Bed_Mesh_Calibrate]
pin: virtual_pin:BED_MESH_CALIBRATE_pin
value: 1


[gcode_macro START_PRINT]
gcode:
     RESPOND TYPE=command MSG='starting 1'

    {% set CHAMBER_TEMP=params.CHAMBER_TEMP|default(0)|float %}
    {% set BED_TEMP=params.BED_TEMP|default(65)|float %}
    {% set EXTRUDER_TEMP=params.EXTRUDER_TEMP|default(230)|float %}
    {% set CARTOGRAPHER_MODEL=params.CARTOGRAPHER_MODEL|default(None) %}
    {% set camera_started = printer["gcode_macro START_CAMERA"].started|default(true) %}
    {% set cartographer = ('cartographer' in printer.configfile.settings) %}
    {% set cartotouch = ('scanner' in printer.configfile.settings and 'touch' == printer.configfile.settings['scanner'].calibration_method|default('touch')) %}
    {% set bed_warp_stabilisation = printer['output_pin Bed_Warp_Stabilisation'].value == 1 %}
    {% set current_bed_temp = printer.heater_bed.temperature %}
    {% set enable_disable_filament_sensor = printer["gcode_macro _START_END_PARAMS"].enable_disable_filament_sensor %}
    {% set max_velocity = printer.configfile.settings['printer'].max_velocity %}
    {% set max_accel = printer.configfile.settings['printer'].max_accel %}
    {% set start_max_velocity = printer["gcode_macro _START_END_PARAMS"].start_max_velocity %}
    {% set start_max_accel = printer["gcode_macro _START_END_PARAMS"].start_max_accel %}
    {% set has_bed_mesh_calibrate = printer['output_pin Bed_Mesh_Calibrate'].value == 1 %}

    {% if CARTOGRAPHER_MODEL %}
        CARTOGRAPHER_MODEL_SELECT name="{CARTOGRAPHER_MODEL}"
    {% endif %}

    RESPOND TYPE=command MSG='starting 2'

    {% if enable_disable_filament_sensor %}
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
    {% endif %}

    {% if CHAMBER_TEMP > 0 %}
        SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=chamber_fan TARGET={CHAMBER_TEMP}
    {% endif %}

    M140 S{BED_TEMP}                                                                # start heating bed dont wait

    {% if cartographer and camera_started %}
        STOP_CAMERA
    {% endif %}

    RESPOND TYPE=command MSG='Setting VELOCITY={start_max_velocity} (was {max_velocity}) ACCEL={start_max_accel} (was {max_accel})'
    SET_VELOCITY_LIMIT VELOCITY={start_max_velocity} ACCEL={start_max_accel}

    G28                                                                             # home all axis

    RESPOND TYPE=command MSG='Waiting for bed temp to reach {BED_TEMP}c'
    M190 S{BED_TEMP}                                                                # wait for bed temperature before next step

    {% if bed_warp_stabilisation %}
       {% if current_bed_temp < (BED_TEMP * 0.99) %}
            _WARP_STABILISE TARGET_TEMP={BED_TEMP} CURRENT_TEMP={current_bed_temp}
        {% else %}
            RESPOND TYPE=command MSG='Skipping bed warp stabilisation as bed already at {current_bed_temp}c'
        {% endif %}
    {% endif %}

    BED_MESH_CLEAR                                                                  # clear current mesh
    G4 P500                                                                         # wait required to prevent MCU overload / inconsistant meshing

    {% if has_bed_mesh_calibrate %}
        BED_MESH_CALIBRATE ADAPTIVE=1 ADAPTIVE_MARGIN=5
    {% else %}
        RESPOND TYPE=command MSG='Skiping BED_MESH_CALIBRATE ADAPTIVE=1 ADAPTIVE_MARGIN=5'
    {% endif %}

    {% if cartotouch %}
        {% set carto_touch_retries = printer["gcode_macro _START_END_PARAMS"].carto_touch_retries %}
        {% set carto_touch_samples = printer["gcode_macro _START_END_PARAMS"].carto_touch_samples %}
        {% set scanner_touch_max_temp = printer.configfile.settings['scanner'].scanner_touch_max_temp %}

        RESPOND TYPE=command MSG='Waiting for nozzle temp to reach {scanner_touch_max_temp}c'
        M109 S{scanner_touch_max_temp}
        CARTOGRAPHER_TOUCH RETRIES={carto_touch_retries} SAMPLES={carto_touch_samples}

        # I think this macro alters accel settings so set them back
        SET_VELOCITY_LIMIT VELOCITY={start_max_velocity} ACCEL={start_max_accel}
    {% endif %}

    SMART_PARK                                                                      # park the printhead near the print area

    {% if cartographer and camera_started %}
        START_CAMERA
    {% endif %}

    RESPOND TYPE=command MSG='Waiting for nozzle temp to reach {EXTRUDER_TEMP}c'
    M109 S{EXTRUDER_TEMP}                                                           # wait for nozzle temperature before next step
    LINE_PURGE

    RESPOND TYPE=command MSG='Restoring VELOCITY={max_velocity} ACCEL={max_accel}'
    SET_VELOCITY_LIMIT VELOCITY={max_velocity} ACCEL={max_accel}


# https://github.com/Guilouz/Creality-Helper-Script/blob/main/files/macros/fans-control.cfg
[gcode_macro M141]
description: Set Chamber Temperature with slicers
gcode:
  {% if 'S' in params|upper %}
    {% if params.S|int > 0 %}
      SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=chamber_fan TARGET={params.S|default(35)}
    {% else %}
      SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=chamber_fan TARGET=35
    {% endif %}
  {% endif %}


[gcode_macro M191]
description: Wait for Chamber Temperature to heat up
gcode:
  {% set s = params.S|float %}
  {% set chamber_temp = printer["temperature_sensor chamber_temp"].temperature|float %}
  {% if s > 0 %}
    M141 S{s}
  {% endif %}
  {% if s > chamber_temp and s <= 90 %}
    M140 S100
    RESPOND TYPE=command MSG="Waiting for the bed to heat up the chamber..."
    TEMPERATURE_WAIT SENSOR="temperature_fan chamber_fan" MINIMUM={s-1}
    RESPOND TYPE=command MSG="Chamber target temperature reached: {s}Â°C"
    M140 S{s}
  {% endif %}