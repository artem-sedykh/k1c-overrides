[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
variable_scan_type: 'rapid_scan'
variable_accel: 1000
gcode:
    RESPOND TYPE=command MSG='Call custom BED_MESH_CALIBRATE'
    {% set max_accel = printer.configfile.settings['printer'].max_accel %}
    {% set camera_started = printer["gcode_macro START_CAMERA"].started|default(true) %}

    SET_VELOCITY_LIMIT ACCEL={accel}

    BED_MESH_CLEAR

    {% if camera_started %}
        RESPOND TYPE=command MSG='Run STOP_CAMERA'
        STOP_CAMERA
    {% endif %}

    G4 P500 # wait required to prevent MCU overload / inconsistant meshing

    _BED_MESH_CALIBRATE METHOD={scan_type} {rawparams}
    
    RESPOND TYPE=command MSG='Restoring ACCEL={max_accel}'
    SET_VELOCITY_LIMIT ACCEL={max_accel}

    {% if camera_started %}
        RESPOND TYPE=command MSG='Run START_CAMERA'
        START_CAMERA
    {% endif %}

[gcode_macro EDDY_PROBE]
gcode: 
    {% set x_pos = printer.toolhead.position.x %}
    {% set y_pos = printer.toolhead.position.y %}
    {% set z_pos = printer.toolhead.position.z %}

    {% set x_offset = printer.configfile.settings["probe_eddy_current btt_eddy"].x_offset | float %}
    {% set y_offset = printer.configfile.settings["probe_eddy_current btt_eddy"].y_offset | float %}

    { action_respond_info("offsets: {},{}.".format((x_offset), (y_offset))) }
    
    G1 X{x_pos - x_offset} Y{y_pos - y_offset} F1200
    PROBE
    G1 Z{z_pos} F600
    G1 X{x_pos} Y{y_pos} F1200